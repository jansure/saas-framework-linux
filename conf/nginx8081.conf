user root;
worker_processes  1;
error_log logs/error8081.log;
events {
	use epoll;
	worker_connections 1024;
}
http {
    # 使用安全防护waf
#	lua_package_path "/data/yangpf/work/conf/waf/?.lua;;";
#	lua_shared_dict limit 10m;
#	init_by_lua_file /data/yangpf/work/conf/waf/init.lua;
#	access_by_lua_file /data/yangpf/work/conf/waf/waf.lua;

	# 指定默认的MIME type, 否则页面样式可能无法显示
	include /usr/local/openresty/nginx/conf/mime.types;
	default_type application/json;

	server {
		listen 8081;

		# 设置允许跨域
		header_filter_by_lua_file /data/yangpf/work/lua-script/handle_cors.lua;
		if ( $request_method = 'OPTIONS' ) {
			return 204;
		}

		location / {
		    # swagger页面不需要验证token，直接转发到后端接口
            if ($request_uri ~* "swagger") {
                rewrite /(.*)$ /$1 break;
                proxy_pass http://114.115.128.139:8083;
            }
            if ($request_uri ~* "/v2/api-docs") {
                rewrite /(.*)$ /$1 break;
                proxy_pass http://114.115.128.139:8083;
            }
		    # 文档相关接口不需要验证token，直接转发到后端接口
		    if ($request_uri ~* "/document/(.*)") {
		        rewrite /(.*)$ /$1 break;
                proxy_pass http://127.0.0.1:8083;
            }
            # lua脚本中先验证token，通过后转发到后端接口
			content_by_lua_file /data/yangpf/work/lua-script/api.lua;
		}

		location = /createtoken {
			content_by_lua_file /data/yangpf/work/lua-script/create_token.lua;
		}

		location = /checktoken {
			content_by_lua_file /data/yangpf/work/lua-script/check_token.lua;
		}
	}
}
