user root;
worker_processes  2;
error_log logs/error.log;
events {
    use epoll;
    worker_connections 1024;
}

# 作为TCP服务器
#stream {
#    tcp_nodelay on;
#
#    lua_package_path "/data/yangpf/work/lua-script/?.lua;;";
#
#    server {
#        listen 192.168.0.210:1688;
#        lua_socket_log_errors off;
#        content_by_lua_block {
#            local stream, err = ngx.req.socket(true)
#            local c, err = stream:receive()
#            ngx.log(ngx.ERR, "receive data to tcp server:", c)
#        }
#
##        content_by_lua_file /data/yangpf/work/lua-script/tcp_server.lua;
#    }
#}

http {
    # 指定默认的MIME type, 否则页面样式可能无法显示
    include /usr/local/openresty/nginx/conf/mime.types;
    default_type application/octet-stream;

    sendfile on;
    # 允许最大上传的文件大小
    client_max_body_size 4096m;
    client_body_buffer_size 4096m;
    # 配置header变量能使用带下划线的变量
    underscores_in_headers on;
    ignore_invalid_headers off;
    # 将完整的请求主体存储在单个缓冲区
    client_body_in_single_buffer on;

    keepalive_timeout 240;
    proxy_buffer_size 64k;
    proxy_buffers 4 128k;
    proxy_busy_buffers_size 256k;
    proxy_connect_timeout 600;
    proxy_send_timeout 1200;
    proxy_read_timeout 1200;

    #hide nginx version for security
    server_tokens off;

    # 使用缓存，配置缓存路径、名称及占用内存大小
    #proxy_cache_path /data/yangpf/work/cache keys_zone=one:10m loader_threshold=300 loader_files=200 max_size=200m;

    server {
        listen 8080;
        # 默认不读取body
        lua_need_request_body off;
        # 使用缓存one
        #proxy_cache one;

        # 绿建CFD相关接口请求转发
        location = /cfd {
            # 仅允许POST请求
            if ($request_method != POST) {
                # Method not allowed
                return 405;
            }
            content_by_lua_file /data/yangpf/work/lua-script/cfd_project.lua;
        }

        # 测试发送tcp数据流
        location = /send {
            content_by_lua_file /data/yangpf/work/lua-script/send_tcp.lua;
        }

        # 测试接收tcp数据流
        location = /receive {
            # 开启高效文件传输模式
            sendfile on;
            # 不着急发送数据，减少网络报文段数量
            # tcp_nopush on;
            # 尽快发送数据，数据在传输过程中不进缓存，提高I/O性能
            tcp_nodelay on;
            content_by_lua_file /data/yangpf/work/lua-script/receive_tcp.lua;
        }

        location = /test {
            content_by_lua_file /data/yangpf/work/lua-script/test.lua;
        }

        # 上传文件进行杀毒
        location = /upload {
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header REMOTE-HOST $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            set $args name=test;
            proxy_pass http://192.168.1.159:8866/scan/file/;
        }

        # 测试反向代理访问其他服务器上的页面，并使用缓存
        location ~* \.(js|css|html|htm)$ {
            # 缓存有效期为10分钟, 响应状态码为200 302 304时缓存
            proxy_cache_valid 200 302 304 10m;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header REMOTE-HOST $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            rewrite /(.*)$ /$1 break;
            proxy_pass http://192.168.0.210:1688;
        }
        # 测试反向代理访问其他服务器上的资源
        location ~* .*\.(png|jpg)$ {
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header REMOTE-HOST $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://192.168.0.5:8866;
        }
    }

    # 另一个端口服务
    server {
        listen 1688;
        server_name  localhost;

        location / {
            root /data/yangpf_test/work/html;
            index index.html index.htm;
            try_files $uri $uri/ =404;
        }

        error_page 404 /index.html;
    }
}
