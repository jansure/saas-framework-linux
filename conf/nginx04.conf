user root;
worker_processes  2;
error_log logs/error.log info;
events {
    use epoll;
    worker_connections 1024;
}
http {
    # 允许最大上传的文件大小，不使用硬盘上的临时文件，请求体数据都在内存中
    client_max_body_size 512m;
    client_body_buffer_size 512m;

    # 使用缓存，配置缓存路径、名称及占用内存大小
    proxy_cache_path /data/yangpf/work/cache levels=1:2 keys_zone=GCIM_cache:100m inactive=1h loader_threshold=300 loader_files=200 max_size=1g;

    # 使用安全防护waf
    lua_package_path "/data/yangpf/work/conf/waf/?.lua;;";
    # 声明一个名为limit、内存空间为10MB的共享内存区，用于cc攻击的访问限制
    lua_shared_dict limit 10m;
    # 声明一个名为clamavlimit、内存空间为1MB的共享内存区，用于拦截到病毒文件的访问限制
    lua_shared_dict clamavlimit 1m;
    init_by_lua_file /data/yangpf/work/conf/waf/init.lua;
    access_by_lua_file /data/yangpf/work/conf/waf/waf.lua;

    # 每500个请求就执行一次内存清理，默认值1000
    lua_malloc_trim 500;
    # 禁用http1.0里的缓冲机制，加快openresty的处理速度
    lua_http10_buffering off;

    # nginx的代理缓存区，默认较小可能导致部分文件出现加载不全
    proxy_buffer_size 128k;
    proxy_buffers 32 128k;
    proxy_busy_buffers_size 128k;

    # bims服务器地址
    upstream backend_bims {
        server 192.168.1.77:8088;
    }

    # clamav服务器地址
    upstream backend_clamav {
        server 192.168.1.159:8866;
    }

    server {
        listen 8080;

        # 构力云生成token
        location = /createtoken {
            content_by_lua_file /data/yangpf/work/lua-script/create_token.lua;
        }

        # 构力云验证token
        location = /checktoken {
            content_by_lua_file /data/yangpf/work/lua-script/check_token.lua;
        }

        # 上传文件进行杀毒
        location = /upload {
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header REMOTE-HOST $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            set $args name=test;
            proxy_pass http://backend_clamav/scan/file/;
        }

        # 模拟先检测病毒，再传输数据流
        location = /transfer {
            content_by_lua_file /data/yangpf/work/lua-script/clamav_first.lua;
        }

        # 模拟拦截到病毒文件
        location = /clamav {
            content_by_lua_block {
                local token = ngx.var.remote_addr .. ngx.var.uri
                local clamavlimit = ngx.shared.clamavlimit
                local req, _ = clamavlimit:get(token)
                if req then
                    -- token存在，则计数+1
                    clamavlimit:incr(token, 1)
                else
                    -- 否则，新增记录，有效期为60s
                    clamavlimit:set(token, 1, 60)
                end
                ngx.say("clamav updated")
            }
        }

        # BIMS访问地址
        location /data/ {
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header REMOTE-HOST $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            rewrite /data/(.*)$ /$1 break;
            proxy_pass http://backend_bims;
        }

        # BIMS访问地址
        location  ~* ^/data/.*\.(js|css|png|html|htm|json)$ {
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header REMOTE-HOST $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            rewrite /data/(.*)$ /$1 break;
            proxy_pass http://backend_bims;
        }

        # BIMS swagger访问地址
        location  ~* ^/swagger/.*\.json$ {
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header REMOTE-HOST $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://backend_bims;
        }
    }
}
